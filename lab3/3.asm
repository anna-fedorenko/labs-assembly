.686 ; директива визначення типу мікропроцесора
.model flat, stdcall ; задання лінійної моделі пам’яті і згода OC Windows
option casemap:none ; відмінність малих та великих букв
include C:\masm32\include\windows.inc  ; бібліотеки, що підключаються
include C:\masm32\include\kernel32.inc 
include C:\masm32\include\user32.inc   ; файли інтерфейса
include C:\masm32\include\fpu.inc
includelib C:\masm32\lib\kernel32.lib   ;підключення бібліотек
includelib C:\masm32\lib\user32.lib
includelib C:\masm32\lib\fpu.lib

.data                                   ;директива визначення даних
CrLf equ 0A0Dh	                        ;визначення константи для символу нового рядка у форматі ASCII
	_y1 dt 0.0                          ;оголошення змінної _y1
	_y2 dt 0.0                          ;оголошення змінної _y2
	_y3 dt 0.0                          ;оголошення змінної _y3
	_y4 dt 0.0                          ;оголошення змінної _y4 
	_y5 dt 0.0                          ;оголошення змінної _y5
	_y6 dt 0.0                          ;оголошення змінної _y6
	_y7 dt 0.0                          ;оголошення змінної _y7
	_y8 dt 0.0	                        ;оголошення змінної _y8
	_x DWORD 1.0                        ;оголошення змінної _x та присвоєння їй значення 1.0
	_const1 DWORD 3.3                   ;оголошення константи1 та присвоєння їй значення 3.3
	_const2 DWORD 1.0                   ;оголошення константи2 та присвоєння їй значення 1.0
	res dt 6 dup(0)                     ;оголошення масиву з шістьма нулями
	_zero DWORD 0.0                     ;оголошення _zero та присвоєння йому значення 0.0
	_step DWORD 0.3                     ;оголошення змінної для кроку _step та присвоєння йому значення 0.3
	info db "Студентка ІІТЕ КНЕУ, каф. ІСЕ  2023 р.",10,10,
"Y = 3,3*log^2(x^2 + 1), де x змінюється з кроком 0.3",10,10, 
   "y1 = "                              ;оголошення рядка з інформацієї
    _res1 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y1                 
	db "y2 = "                          ;оголошення рядка y2
	_res2 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y2
	db "y3 = "                          ;оголошення рядка y3
	_res3 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y3
	db "y4 = "                          ;оголошення рядка y4
	_res4 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y4
	db "y5 = "                          ;оголошення рядка y5
	_res5 db 15 DUP(0),10,13            ;оголошення масиву для збереження результату y5
	db "y6 = "                          ;оголошення рядка y6
	_res6 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y6
	db "y7 = "                          ;оголошення рядка y7
	_res7 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y7
	db "y8 = "                          ;оголошення рядка y8
	_res8 db 14 DUP(0),10,13            ;оголошення масиву для збереження результату y8	
	ttl db "Обробка чисел на співпроцесорі в циклі",0   ; оголошення заголовку вікна
.code 		        ;директива початку сегмента команд                     
_start:  		    ;мітка початку програми з ім’ям _start
finit               ;ініціалізація FPU
mov ecx, 8          ;ініціалізація лічильника циклу
m1:                 ;мітка циклу
    fld _x          ;1(st(0))
	fmul _x         ;1*1(st(0))
	fadd _const2    ;1*1+1(st(0))
	fyl2x           ;log2(1*1+1)(st(0))
	fmul _const1    ;3.3*log2(1*1+1)(st(0))
	fld _x          ;log2(1*1+1)*3.3 (st(1))
	fadd _step      ;1.3 = 1 + 0.3 (st(1)), log^2(1*1+1)*3.3 (st(0))
	fstp _x         ;_x = 1 + 1.3 ,  log^2(1*1+1)*3.3 (st(0))
 loop m1            ;кінець циклу
    fstp _y8        ;перенесення значення з вершини стеку FPU у змінну _y8
	fstp _y7        ;перенесення значення з вершини стеку FPU у змінну _y7
	fstp _y6        ;перенесення значення з вершини стеку FPU у змінну _y6
	fstp _y5        ;перенесення значення з вершини стеку FPU у змінну _y5
	fstp _y4        ;перенесення значення з вершини стеку FPU у змінну _y4
	fstp _y3        ;перенесення значення з вершини стеку FPU у змінну _y3
	fstp _y2        ;перенесення значення з вершини стеку FPU у змінну _y2
	fstp _y1        ;перенесення значення з вершини стеку FPU у змінну _y1
    invoke FpuFLtoA,offset _y1,5,offset _res1,SRC1_REAL or SRC2_DIMM       ;конвертування значення _y1 у формат десяткового числа з плаваючою комою та запис його у змінну _res1
	mov word ptr _res1 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res1
	invoke FpuFLtoA,offset _y2,5,offset _res2,SRC1_REAL or SRC2_DIMM       ;конвертування _y2 у десятковий формат з плаваючою комою та запис його у _res2
	mov word ptr _res2 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res2
	invoke FpuFLtoA,offset _y3,5,offset _res3,SRC1_REAL or SRC2_DIMM       ;конвертування _y3 у десятковий формат з плаваючою комою та запис його у _res3
	mov word ptr _res3 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res3
	invoke FpuFLtoA,offset _y4,5,offset _res4,SRC1_REAL or SRC2_DIMM       ;конвертування _y4 у десятковий формат з плаваючою комою та запис його у _res4
	mov word ptr _res4 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res4
	invoke FpuFLtoA,offset _y5,5,offset _res5,SRC1_REAL or SRC2_DIMM       ;конвертування _y5 у десятковий формат з плаваючою комою та запис його у _res5
    mov word ptr _res5 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res5
	invoke FpuFLtoA,offset _y6,5,offset _res3,SRC1_REAL or SRC2_DIMM       ;конвертування _y6 у десятковий формат з плаваючою комою та запис його у _res6
	mov word ptr _res6 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res6
	invoke FpuFLtoA,offset _y7,5,offset _res4,SRC1_REAL or SRC2_DIMM       ;конвертування _y7 у десятковий формат з плаваючою комою та запис його у _res7
	mov word ptr _res7 + 14, CrLf                                           ;додавання символів переносу рядка до рядка _res7
	invoke FpuFLtoA,offset _y8,5,offset _res5,SRC1_REAL or SRC2_DIMM       ;конвертування _y8 у десятковий формат з плаваючою комою та запис його у _res8
invoke MessageBox, 0, offset info, offset ttl, MB_ICONINFORMATION           ;виклик ;MessageBox
invoke  ExitProcess, 0  ;завершення процесу	
end _start              ;закінчення програми з ім’ям _start